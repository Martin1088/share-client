/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.enums.EventMessageType;
import de.samply.share.client.model.db.tables.records.EventLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Log certain events that happen during job execution. E.g. Upload was triggered 
 * or inquiry was received/executed
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventLog extends TableImpl<EventLogRecord> {

    private static final long serialVersionUID = -1376442417;

    /**
     * The reference instance of <code>samply.event_log</code>
     */
    public static final EventLog EVENT_LOG = new EventLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventLogRecord> getRecordType() {
        return EventLogRecord.class;
    }

    /**
     * The column <code>samply.event_log.id</code>.
     */
    public final TableField<EventLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.event_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.event_log.event_type</code>.
     */
    public final TableField<EventLogRecord, EventMessageType> EVENT_TYPE = createField("event_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.EventMessageType.class), this, "");

    /**
     * The column <code>samply.event_log.inquiry_id</code>.
     */
    public final TableField<EventLogRecord, Integer> INQUIRY_ID = createField("inquiry_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.event_log.upload_id</code>.
     */
    public final TableField<EventLogRecord, Integer> UPLOAD_ID = createField("upload_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.event_log.user_id</code>.
     */
    public final TableField<EventLogRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.event_log.quality_report_id</code>.
     */
    public final TableField<EventLogRecord, Integer> QUALITY_REPORT_ID = createField("quality_report_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.event_log.event_time</code>. when did the logged event occur?
     */
    public final TableField<EventLogRecord, Timestamp> EVENT_TIME = createField("event_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "when did the logged event occur?");

    /**
     * The column <code>samply.event_log.show_in_global</code>.
     */
    public final TableField<EventLogRecord, Boolean> SHOW_IN_GLOBAL = createField("show_in_global", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>samply.event_log.entry</code>. Either a message or a set of parameters. As a JSON String
     */
    public final TableField<EventLogRecord, String> ENTRY = createField("entry", org.jooq.impl.SQLDataType.CLOB, this, "Either a message or a set of parameters. As a JSON String");

    /**
     * Create a <code>samply.event_log</code> table reference
     */
    public EventLog() {
        this("event_log", null);
    }

    /**
     * Create an aliased <code>samply.event_log</code> table reference
     */
    public EventLog(String alias) {
        this(alias, EVENT_LOG);
    }

    private EventLog(String alias, Table<EventLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventLog(String alias, Table<EventLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Log certain events that happen during job execution. E.g. Upload was triggered or inquiry was received/executed");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventLogRecord> getPrimaryKey() {
        return Keys.EVENT_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventLogRecord>> getKeys() {
        return Arrays.<UniqueKey<EventLogRecord>>asList(Keys.EVENT_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EventLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventLogRecord, ?>>asList(Keys.EVENT_LOG__EVENT_LOG_INQUIRY_ID_FKEY, Keys.EVENT_LOG__EVENT_LOG_UPLOAD_ID_FKEY, Keys.EVENT_LOG__EVENT_LOG_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventLog as(String alias) {
        return new EventLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(String name) {
        return new EventLog(name, null);
    }
}
