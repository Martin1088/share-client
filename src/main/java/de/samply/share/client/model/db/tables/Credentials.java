/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.enums.AuthSchemeType;
import de.samply.share.client.model.db.enums.TargetType;
import de.samply.share.client.model.db.tables.records.CredentialsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Stored credentials for central search,  searchbrokers, local datamanagement...
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credentials extends TableImpl<CredentialsRecord> {

    private static final long serialVersionUID = 1351191359;

    /**
     * The reference instance of <code>samply.credentials</code>
     */
    public static final Credentials CREDENTIALS = new Credentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CredentialsRecord> getRecordType() {
        return CredentialsRecord.class;
    }

    /**
     * The column <code>samply.credentials.id</code>.
     */
    public final TableField<CredentialsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.credentials_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.credentials.auth_scheme</code>.
     */
    public final TableField<CredentialsRecord, AuthSchemeType> AUTH_SCHEME = createField("auth_scheme", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.AuthSchemeType.class), this, "");

    /**
     * The column <code>samply.credentials.target</code>. proxy? central search? broker? user?
     */
    public final TableField<CredentialsRecord, TargetType> TARGET = createField("target", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.TargetType.class), this, "proxy? central search? broker? user?");

    /**
     * The column <code>samply.credentials.username</code>.
     */
    public final TableField<CredentialsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.credentials.passcode</code>. May be a hashed password for the user login or a plain password for central search or maybe just an apikey
     */
    public final TableField<CredentialsRecord, String> PASSCODE = createField("passcode", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "May be a hashed password for the user login or a plain password for central search or maybe just an apikey");

    /**
     * The column <code>samply.credentials.workstation</code>. Currently not used. Might be relevant for other auth schemes
     */
    public final TableField<CredentialsRecord, String> WORKSTATION = createField("workstation", org.jooq.impl.SQLDataType.CLOB, this, "Currently not used. Might be relevant for other auth schemes");

    /**
     * The column <code>samply.credentials.domain</code>. Currently not used. Might be relevant for other auth schemes
     */
    public final TableField<CredentialsRecord, String> DOMAIN = createField("domain", org.jooq.impl.SQLDataType.CLOB, this, "Currently not used. Might be relevant for other auth schemes");

    /**
     * Create a <code>samply.credentials</code> table reference
     */
    public Credentials() {
        this("credentials", null);
    }

    /**
     * Create an aliased <code>samply.credentials</code> table reference
     */
    public Credentials(String alias) {
        this(alias, CREDENTIALS);
    }

    private Credentials(String alias, Table<CredentialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Credentials(String alias, Table<CredentialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Stored credentials for central search,  searchbrokers, local datamanagement...");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CredentialsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CREDENTIALS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CredentialsRecord> getPrimaryKey() {
        return Keys.CREDENTIALS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CredentialsRecord>> getKeys() {
        return Arrays.<UniqueKey<CredentialsRecord>>asList(Keys.CREDENTIALS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credentials as(String alias) {
        return new Credentials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials rename(String name) {
        return new Credentials(name, null);
    }
}
