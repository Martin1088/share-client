/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.enums.EntityType;
import de.samply.share.client.model.db.tables.records.RequestedEntityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * An inquirer can request different types of entities (biomaterial, clinical 
 * data...)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestedEntity extends TableImpl<RequestedEntityRecord> {

    private static final long serialVersionUID = -1180340950;

    /**
     * The reference instance of <code>samply.requested_entity</code>
     */
    public static final RequestedEntity REQUESTED_ENTITY = new RequestedEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestedEntityRecord> getRecordType() {
        return RequestedEntityRecord.class;
    }

    /**
     * The column <code>samply.requested_entity.id</code>.
     */
    public final TableField<RequestedEntityRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.requested_entity_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.requested_entity.name</code>.
     */
    public final TableField<RequestedEntityRecord, EntityType> NAME = createField("name", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.EntityType.class), this, "");

    /**
     * Create a <code>samply.requested_entity</code> table reference
     */
    public RequestedEntity() {
        this("requested_entity", null);
    }

    /**
     * Create an aliased <code>samply.requested_entity</code> table reference
     */
    public RequestedEntity(String alias) {
        this(alias, REQUESTED_ENTITY);
    }

    private RequestedEntity(String alias, Table<RequestedEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private RequestedEntity(String alias, Table<RequestedEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "An inquirer can request different types of entities (biomaterial, clinical data...)");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RequestedEntityRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REQUESTED_ENTITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RequestedEntityRecord> getPrimaryKey() {
        return Keys.REQUESTED_ENTITY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RequestedEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestedEntityRecord>>asList(Keys.REQUESTED_ENTITY_PKEY, Keys.REQUESTED_ENTITY_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequestedEntity as(String alias) {
        return new RequestedEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestedEntity rename(String name) {
        return new RequestedEntity(name, null);
    }
}
