/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.enums.BrokerStatusType;
import de.samply.share.client.model.db.tables.records.BrokerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Broker extends TableImpl<BrokerRecord> {

    private static final long serialVersionUID = 1221471098;

    /**
     * The reference instance of <code>samply.broker</code>
     */
    public static final Broker BROKER = new Broker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrokerRecord> getRecordType() {
        return BrokerRecord.class;
    }

    /**
     * The column <code>samply.broker.id</code>.
     */
    public final TableField<BrokerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.broker_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.broker.address</code>. The base URL of the searchbroker
     */
    public final TableField<BrokerRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "The base URL of the searchbroker");

    /**
     * The column <code>samply.broker.name</code>. A self-assigned name of the searchbroker (e.g. "Decentral Searchbroker for DKTK")
     */
    public final TableField<BrokerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "A self-assigned name of the searchbroker (e.g. \"Decentral Searchbroker for DKTK\")");

    /**
     * The column <code>samply.broker.last_checked</code>. When was this searchbroker queries the last time?
     */
    public final TableField<BrokerRecord, Timestamp> LAST_CHECKED = createField("last_checked", org.jooq.impl.SQLDataType.TIMESTAMP, this, "When was this searchbroker queries the last time?");

    /**
     * The column <code>samply.broker.credentials_id</code>.
     */
    public final TableField<BrokerRecord, Integer> CREDENTIALS_ID = createField("credentials_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.broker.status</code>.
     */
    public final TableField<BrokerRecord, BrokerStatusType> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.BrokerStatusType.class), this, "");

    /**
     * Create a <code>samply.broker</code> table reference
     */
    public Broker() {
        this("broker", null);
    }

    /**
     * Create an aliased <code>samply.broker</code> table reference
     */
    public Broker(String alias) {
        this(alias, BROKER);
    }

    private Broker(String alias, Table<BrokerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Broker(String alias, Table<BrokerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BrokerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BROKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BrokerRecord> getPrimaryKey() {
        return Keys.BROKER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BrokerRecord>> getKeys() {
        return Arrays.<UniqueKey<BrokerRecord>>asList(Keys.BROKER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BrokerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BrokerRecord, ?>>asList(Keys.BROKER__BROKER_CREDENTIALS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Broker as(String alias) {
        return new Broker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(String name) {
        return new Broker(name, null);
    }
}
