/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.tables.records.InquiryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Inquiry extends TableImpl<InquiryRecord> {

    private static final long serialVersionUID = 139458337;

    /**
     * The reference instance of <code>samply.inquiry</code>
     */
    public static final Inquiry INQUIRY = new Inquiry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InquiryRecord> getRecordType() {
        return InquiryRecord.class;
    }

    /**
     * The column <code>samply.inquiry.id</code>.
     */
    public final TableField<InquiryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.inquiry_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.inquiry.upload_id</code>.
     */
    public final TableField<InquiryRecord, Integer> UPLOAD_ID = createField("upload_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.inquiry.source_id</code>.
     */
    public final TableField<InquiryRecord, Integer> SOURCE_ID = createField("source_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.inquiry.label</code>.
     */
    public final TableField<InquiryRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.inquiry.description</code>.
     */
    public final TableField<InquiryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.inquiry.broker_id</code>.
     */
    public final TableField<InquiryRecord, Integer> BROKER_ID = createField("broker_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.inquiry.latest_details_id</code>.
     */
    public final TableField<InquiryRecord, Integer> LATEST_DETAILS_ID = createField("latest_details_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.inquiry.archived_at</code>. if this inquiry was archived...set the timestamp here. if it is not archived, this shall be null
     */
    public final TableField<InquiryRecord, Timestamp> ARCHIVED_AT = createField("archived_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "if this inquiry was archived...set the timestamp here. if it is not archived, this shall be null");

    /**
     * The column <code>samply.inquiry.deleted_at</code>. allow to mark an inquiry as deleted. set to null if it is not deleted
     */
    public final TableField<InquiryRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "allow to mark an inquiry as deleted. set to null if it is not deleted");

    /**
     * Create a <code>samply.inquiry</code> table reference
     */
    public Inquiry() {
        this("inquiry", null);
    }

    /**
     * Create an aliased <code>samply.inquiry</code> table reference
     */
    public Inquiry(String alias) {
        this(alias, INQUIRY);
    }

    private Inquiry(String alias, Table<InquiryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Inquiry(String alias, Table<InquiryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InquiryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INQUIRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InquiryRecord> getPrimaryKey() {
        return Keys.INQUIRY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InquiryRecord>> getKeys() {
        return Arrays.<UniqueKey<InquiryRecord>>asList(Keys.INQUIRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InquiryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InquiryRecord, ?>>asList(Keys.INQUIRY__INQUIRY_UPLOAD_ID_FKEY, Keys.INQUIRY__INQUIRY_BROKER_ID_FKEY, Keys.INQUIRY__INQUIRY_LATEST_DETAILS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Inquiry as(String alias) {
        return new Inquiry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inquiry rename(String name) {
        return new Inquiry(name, null);
    }
}
