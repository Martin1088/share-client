/*
 * This file is generated by jOOQ.
*/
package de.samply.share.client.model.db.tables;


import de.samply.share.client.model.db.Keys;
import de.samply.share.client.model.db.Samply;
import de.samply.share.client.model.db.enums.UploadStatusType;
import de.samply.share.client.model.db.tables.records.UploadRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Uploads to central search.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Upload extends TableImpl<UploadRecord> {

    private static final long serialVersionUID = 225134509;

    /**
     * The reference instance of <code>samply.upload</code>
     */
    public static final Upload UPLOAD = new Upload();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UploadRecord> getRecordType() {
        return UploadRecord.class;
    }

    /**
     * The column <code>samply.upload.id</code>.
     */
    public final TableField<UploadRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.upload_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.upload.status</code>.
     */
    public final TableField<UploadRecord, UploadStatusType> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.client.model.db.enums.UploadStatusType.class), this, "");

    /**
     * The column <code>samply.upload.triggered_at</code>.
     */
    public final TableField<UploadRecord, Timestamp> TRIGGERED_AT = createField("triggered_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>samply.upload.triggered_by</code>. Who triggered the upload? Was it automatically by the scheduler, or did a user do it?
     */
    public final TableField<UploadRecord, String> TRIGGERED_BY = createField("triggered_by", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'scheduled'::text", org.jooq.impl.SQLDataType.CLOB)), this, "Who triggered the upload? Was it automatically by the scheduler, or did a user do it?");

    /**
     * The column <code>samply.upload.is_dryrun</code>.
     */
    public final TableField<UploadRecord, Boolean> IS_DRYRUN = createField("is_dryrun", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>samply.upload.is_full_upload</code>.
     */
    public final TableField<UploadRecord, Boolean> IS_FULL_UPLOAD = createField("is_full_upload", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>samply.upload.dktk_flagged</code>.
     */
    public final TableField<UploadRecord, Boolean> DKTK_FLAGGED = createField("dktk_flagged", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>samply.upload.success_count</code>. How many upload datasets were acknowledged with a 2xx status code
     */
    public final TableField<UploadRecord, Integer> SUCCESS_COUNT = createField("success_count", org.jooq.impl.SQLDataType.INTEGER, this, "How many upload datasets were acknowledged with a 2xx status code");

    /**
     * The column <code>samply.upload.failure_count</code>. How many upload datasets were finally denied
     */
    public final TableField<UploadRecord, Integer> FAILURE_COUNT = createField("failure_count", org.jooq.impl.SQLDataType.INTEGER, this, "How many upload datasets were finally denied");

    /**
     * The column <code>samply.upload.failed_patients</code>. A JSON array of DKTK site ids of the failed patients
     */
    public final TableField<UploadRecord, String> FAILED_PATIENTS = createField("failed_patients", org.jooq.impl.SQLDataType.CLOB, this, "A JSON array of DKTK site ids of the failed patients");

    /**
     * The column <code>samply.upload.time_to_set</code>. The timestamp that will be set at the central mds db at the end of the upload
     */
    public final TableField<UploadRecord, Timestamp> TIME_TO_SET = createField("time_to_set", org.jooq.impl.SQLDataType.TIMESTAMP, this, "The timestamp that will be set at the central mds db at the end of the upload");

    /**
     * Create a <code>samply.upload</code> table reference
     */
    public Upload() {
        this("upload", null);
    }

    /**
     * Create an aliased <code>samply.upload</code> table reference
     */
    public Upload(String alias) {
        this(alias, UPLOAD);
    }

    private Upload(String alias, Table<UploadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Upload(String alias, Table<UploadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Uploads to central search.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UploadRecord, Integer> getIdentity() {
        return Keys.IDENTITY_UPLOAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UploadRecord> getPrimaryKey() {
        return Keys.UPLOAD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UploadRecord>> getKeys() {
        return Arrays.<UniqueKey<UploadRecord>>asList(Keys.UPLOAD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Upload as(String alias) {
        return new Upload(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Upload rename(String name) {
        return new Upload(name, null);
    }
}
